- Язык разметки HTML.
- Понятие тега и атрибута.
- Структура HTML-документа.
- Инструменты веб-разработчика: Chrome DevTools, вкладка elements.
- Разница между тегом и элементом.
- Основные теги: заголовки, абзацы, списки, изображения, ссылки и т. д.
- Абсолютные и относительные пути
- Поток документа.
- Строчные и блочные элементы.
- Валидация.
- Стиль HTML-кода.

//=========================================================================

Потоковые: flow
- header
- footer
- main
- ul/ol
- p


//=========================================================================

Фразовые:
- img
- a
- button
- br
- span

//=========================================================================

Группировка контента по смыслу, обертки.

Крупные смысловые разделы:
- article
- section
- nav
- div

1. Можем дать имя разделу и вынести этот раздел на другой сайт? - article
2. Можем дать имя разделу, но вынести на другой сайт не можете? - section
3. Не можете дать имя? Вменяемое имя, а не «левая колонка» - div

//=========================================================================

Разметка это когда все содержательные элементы документа представленными
подходящими по смыслу тегами.

Страница как документ
- Задача — восстановить из макета первоначальную логическую структуру документа.
- Можно добавлять то, чего не видно на макете.
- В разметку попадает не всё, что есть на макете.

Алгоритм разметки
1. Выделяем повторяющиеся на каждой странице блоки (шапка и подвал) и основное
содержание.
2. В этих блоках размечаем крупные смысловые разделы.
3. В документе, и в каждом смысловом разделе выделяем заголовки (если их нет в макете, то
позже прячем с помощью стилей).
4. Размечаем оставшиеся мелкие элементы в каждом смысловом разделе методом исключения:
  - Если получилось найти самый подходящий тег – используем его (article, section, nav).
  - Нужно разметить потоковый контейнер – <div>.
  - Нужно сгруппировать мелкие фразовые элементы – <p>.
  - Нужно выделить сам мелкий фразовый элемент (слово или фразу) – <span>.

При разметке добавляем всем тегам понятные имена классов. Теги без классов допустимы, если
из контекста понятно их назначение.

При дальнейшей вёрстке разметка может меняться, если это необходимо для стилизации.
Чаще всего добавляются обёртки с помощью <div>.

Как называть классы?
- Имя класса должно отражать назначение элемента, а не рассказывать о его внешнем виде.
- Воздержитесь от транслита.

хорошо: cart main-menu list list-item

плохо: razdel krasniy-kvadrat spisok item112

Словарь! - https://github.com/yoksel/common-words

//=========================================================================

Пространства имён классов

Упрощают именование классов.
- Разбивают код на относительно независимые блоки.
- Предотвращают нежелательное перемешивание стилей.
- Ускоряют разработку и упрощают поддержку.

//=========================================================================

Признаки хорошей разметки

- Использовано минимально необходимое количество тегов.
- Имена классов рассказывают о назначении элементов.
- Есть чёткие границы смысловых блоков, легко понять к какому блоку принадлежит тег.
- Соблюдение стиля кода
- Отсутствие лишних элементов
